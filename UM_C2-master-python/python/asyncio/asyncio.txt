
Asyncio
	trabajo de manera concurrente con IO
	thread-safe

	multiprocessing -> paralelismo
	threading -> concurrencia
		GIL - global interpreter lock
		cpython
	
	asincronismo
		alternativa a threading
	

Ejemplo ajedrez: PyCon 2017 Miguel Grinsbert
	un ajedrecista contra 24
	5s en hacer su movimiento
	el resto: 55s en hacer su movimiento

	suponiendo un juego de 60 movs promedio

	forma sincrónica:
		(55+5) * 60 = 3600s = 60min
		24 jugadores: 24hr de juego
	
	forma asincrónica:
		el experto demora 5s en cada tablero y salta al siguiente
		al final de la ronda: 120s, el experto vuelve al primer tablero
		60 veces en cada tablero
		60*120 = 7200s = 120min = 2hr

		1 2 3 4 5 6 7 8 9 ... 24
		5 5 5 5 5 5 5 5 5 ... 5 (sum = 120=5*24)
		5 5 5 5 5 5 5 5 5 ... 5
		...
		60 veces (60 movs de cada lado)
		--> loop de eventos
	
	API's de asyncio:
		alto nivel <--
		bajo nivel (loops, ...)


Ejemplo: maraton + zapatillas desatadas
	tareas:
		correr maraton
		atarse las zapatillas

	forma sincrónica
		terminar de correr
		atarse las zapatillas

	forma asincrónica:
		correr
		atarme las zapatillas
		correr

	forma paralela:
		correr y atarse las zapatillas al mismo tiempo

async: transforma una funcion en corutina
	le decimos a python que una función no es secuencial
	sino que vamos a meterla en un "loop" de eventos concurrentes

	ejemplo del divs:
		lanzo 3 corutinas:
			grande
			mediana
			chiquita
